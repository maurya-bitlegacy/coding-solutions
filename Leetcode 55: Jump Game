class Solution: # TTL for 1 long case
    def canJump(self, nums: List[int]) -> bool:
        reachable = [False for i in range(len(nums))]
        reachable[0] = True
        for i in range(len(nums)):
            if reachable[i]==False:
                break
            for j in range(1,nums[i]+1):
                if i+j < len(nums):
                    reachable[i+j] = True
        return reachable[-1]
                
class Solution: # O(n) time, O(n) space
    def canJump(self, nums: List[int]) -> bool:
        reachable = [False for i in range(len(nums))]
        reachable[0] = True
        farthestTrue=0
        for i in range(len(nums)-1):
            if i>farthestTrue:
                break
            farthestTrue = max(farthestTrue,min(i+nums[i], len(nums)-1))
            reachable[farthestTrue] = True
        return reachable[-1]
                
class Solution: # O(n) time, O(1) space
    def canJump(self, nums: List[int]) -> bool:
        farthestTrue=0
        for i in range(len(nums)-1):
            if i>farthestTrue:
                break
            farthestTrue = max(farthestTrue,min(i+nums[i], len(nums)-1))
        return farthestTrue == len(nums)-1                
        
