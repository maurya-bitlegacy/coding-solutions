class Solution: # O(N), O(1) solution. Use a single output array to keep left and right products
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        product=[0 for x in range(len(nums))]
        product[0]=1
        lp,rp=1,1
        for i in range(1,len(nums)):
            lp *= nums[i-1]
            product[i]=lp # Left product
        for i in range(len(nums)-2,-1,-1):
            rp *= nums[i+1]
            product[i]*=rp # Right product
        return product
        
class Solution: # O(n), O(n) solution. Use separate arrays for left and right products
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        L=[0 for x in range(len(nums))]
        R=[0 for x in range(len(nums))]
        L[0],R[-1]=1,1
        lp,rp=1,1
        for i in range(1,len(nums)):
            lp *= nums[i-1]
            L[i]=lp
        for i in range(len(nums)-2,-1,-1):
            rp *= nums[i+1]
            R[i]=rp
        for i in range(len(nums)):
            L[i] *= R[i]
        return L
