import java.util.*;
class Solution {
    public int findSpecialInteger(int[] nums) {
        // The element should be at either n/4, n/2 or 3n/4. Find the first occurrence by binary search. If nums[first occurrence + 0.25n] is also the same element then this element occurs more than 25% of the times.
        int target = nums[nums.length/4];
        int pos = firstOccurence(nums,target);
        //System.out.println(0.25*nums.length);
        if(nums[pos+(int)Math.floor(0.25*nums.length)] == target)
            return target;
        
        target = nums[nums.length/2];
        pos = firstOccurence(nums,target);
         if(nums[pos+(int)Math.floor(0.25*nums.length)] == target)
            return target;
        
        target = nums[3*nums.length/2];
        pos = firstOccurence(nums,target);
         if(nums[pos+(int)Math.floor(0.25*nums.length)] == target)
            return target;
        return -1;
    }
    public int firstOccurence(int[] nums, int target){
        int low = 0;
        int high = nums.length-1;
        while(low<=high){ // Find first occurence
            int mid = low + ((high - low) / 2);
            
            if (nums[mid]==target && (mid==0 ||nums[mid-1]!=target)){
                return mid;
            }
            else if(nums[mid]==target)
                high=mid-1;
            else if(nums[mid]>target)
                high=mid-1;
            else
                low=mid+1;
        }
        return -1;
    }
}
